breed [swarm-agents swarm-agent]
breed [midpoints midpoint]



globals [
  curr-midpoint; the index of the currently selected midpoint
  layer-midpoints-count
  layers-absolute-count
  layers-radius
  layers-neighbourhood
  layers-swarm-algortihm
  layers-move-weight
]


swarm-agents-own [
  layer ;index of the layer this agent belongs to
  swarm ;index of sthe swarm this agent belongs to
  swarm-radius
  swarm-algortihm
  swarm-neighbourhood
  swarm-move-weight
  mp-index;
  orientation
]

midpoints-own [
  index ;index of the midpoint (for swarm behaviour)
  orientation
]

;Setup-----------------------------------------------------------------------


to startup
  ;setup
end

to setup
  if layer-midpoints-count = 0 [
    if-else user-yes-or-no? (word "You need to first set up the layers. Du you want to use the default Ring-of-Rings setup ?")[
    scenario-1
    ] [
      stop
    ]
  ]


  clear
  setup-agents
  if count swarm-agents = 0 [stop]
  setup-world
  setup-midpoints
  select-midpoint
  setup-hierarchic
  if (set-mode = "multiple-set") [
    setup-multiple-set
  ]
  reset-ticks
end

to clear
   clear-ticks
   clear-turtles
   clear-patches
   clear-drawing
   clear-all-plots
   clear-output
end

to setup-world
 ask patches with [pzcor = min-pzcor][
   set pcolor white
  ]
 ask patches with [pxcor = min-pxcor][
   set pcolor white
  ]
 ask patches with [pycor = min-pycor][
   set pcolor white
  ]

  ask patches with [pzcor = min-pzcor] [
    if (pycor = min-pycor) and (pxcor < -20) [set pcolor red]
    if (pxcor = min-pxcor) and (pycor < -20 ) [set pcolor green]
  ]
  ask patches with [pycor = min-pycor and pxcor = min-pxcor ] [
    if (pzcor < -20) [set pcolor blue]
  ]
end

to setup-agents
  set layers-absolute-count [0 0 0 0 0]
  let agent-count item 0 layer-midpoints-count
  set layers-absolute-count replace-item 0 layers-absolute-count agent-count
  let i 1
  while [i < length layer-midpoints-count] [
    let c ((item i layer-midpoints-count) * (item (i - 1) layers-absolute-count))
    set layers-absolute-count replace-item i layers-absolute-count c
    set agent-count agent-count + c
    set i (i + 1)
  ]

  show agent-count
  if agent-count > agent-max-count [
    if not user-yes-or-no? (word "You are about to spawn " agent-count " agents. Are you shure ?")[
      stop
    ]
  ]

  create-swarm-agents agent-count
  ask swarm-agents [
    initialize-agent
  ]
end





to setup-midpoints

  create-midpoints 1
  ask midpoints [
    initialize-midpoints
  ]
  let i 1

end




to setup-multiple-set
  let i 0
  let s 1
  while [i < layer-count] [
    while [ count swarm-agents with [layer = i and swarm = 0] > 0]
    [
      ask n-of (item i layer-midpoints-count) swarm-agents with [ layer = i and swarm = 0] [
        set swarm s
      ]
      set s s + 1
    ]

    set i i + 1

  ]

  set i 0
  let mp 2
  while [i < layer-count - 1] [
    while [count swarm-agents with [layer = i and mp-index = 0] > 0] [
      ask one-of swarm-agents with [layer = i and mp-index = 0] [
        set mp-index mp
      ]
      set mp mp + 1
    ]
    set i i + 1
  ]



  ask swarm-agents [
    set color ((swarm * 10) + 5)
  ]
end


to setup-hierarchic
  let i 0
  while [i < layer-count] [
    ask n-of (item i layers-absolute-count) swarm-agents with [layer = -1] [
      set layer i
    ]
    set i i + 1
  ]

  setup-swarm-parameters

  ask swarm-agents [
    set color ((layer * 10) + 15)
  ]

end


to setup-swarm-parameters
   let i 0
   while [i < layer-count - 1] [
    ask swarm-agents with [layer = i] [
      set swarm-radius item (i + 1) layers-radius
      set swarm-algortihm item (i + 1) layers-swarm-algortihm
      set swarm-neighbourhood item (i + 1) layers-neighbourhood
      set swarm-move-weight item (i + 1) layers-move-weight
    ]
    set i i + 1
  ]

end




;Init

to initialize-agent
   set layer -1
   set swarm 0
   set mp-index 0
   setxyz  random-xcor random-ycor random-zcor
   set color orange
   ;set shape "circle"
   ;set size 3
   set orientation (list dx dy dz)
end



to initialize-midpoints
  set index 0
  setxyz 0 0 0
  set color red
  set shape "x"
  set size 1
  set pitch 90
  set orientation (list dx dy dz)
end


;;GO--------------------------------------------------------------------------------------;;

to go

  ;Set the position of the selected Midpoint
  go-midpoints
  setup-swarm-parameters
  let mid-agent nobody
  let closest nobody
  ask swarm-agents [
    if-else sync-orientation [
      set orientation [orientation] of one-of midpoints
    ] [
      set orientation (list dx dy dz)
    ]


    set mid-agent get-mid-agent


    let neighbourhood 0
    let r 0
    let sa ""
    let mw 0
    if-else (layer = 0) [
      set neighbourhood item 0 layers-neighbourhood
      set r item 0 layers-radius
      set sa item 0 layers-swarm-algortihm
      set mw item 0 layers-move-weight
    ] [
      set neighbourhood [swarm-neighbourhood] of mid-agent
      set r [swarm-radius] of mid-agent
      set sa [swarm-algortihm] of mid-agent
      set mw [swarm-move-weight] of mid-agent

    ]

    set closest get-closest neighbourhood
    let vector [0 0 0]
    (ifelse
      sa = "Ring-of-Fliers" [
        set vector calc-ring-of-fliers mid-agent closest r mw
      ]
      sa = "Ball-of-Fliers" [
        set vector calc-ball-of-fliers mid-agent closest r
      ]
      sa = "Line-of-Fliers" [
        set vector calc-line-of-fliers mid-agent closest r
      ]
    )


    adapt-flight-vector vector
  ]

  tick
end



to-report get-mid-agent
  if  (layer = 0) [
      report one-of midpoints
    ]
  if-else (set-mode = "multiple-set") [
    report one-of swarm-agents with [mp-index = [swarm] of myself]
  ] [
    report min-one-of swarm-agents with [layer = ([layer] of myself - 1)] [distance myself]
  ]

end


to-report get-closest [neighbourhood]

  if (separation-mode = "local") [
    report min-one-of other swarm-agents with [layer = ([layer] of myself)] in-radius neighbourhood [distance myself]
  ]

  report min-one-of other swarm-agents in-radius neighbourhood [distance myself]

end


to go-midpoints
  ask midpoints with [index = curr-midpoint] [
    set xcor controller-x
    set ycor controller-y
    set zcor controller-z
    set heading controller-heading
    set pitch controller-pitch
    set orientation (list dx dy dz)
  ]
  tick
end

to go-layers
  set layer-midpoints-count [0 0 0 0 0]

end





to-report calc-ring-of-fliers [mid-agent closest r mw]
  let mid agent-to-vector mid-agent
  ;center urge
  let center-urge sub mid (agent-to-vector self)
  set center-urge scale (((magnitude center-urge) - ( r / (layer + 1) )) / (magnitude center-urge))  center-urge

  ;seperation urge
  let separation-urge [0 0 0]
  let seperation-urge-weight 0
  if (closest != nobody) [
    set separation-urge sub (agent-to-vector self) (agent-to-vector closest)
    set seperation-urge-weight ((1 / magnitude separation-urge) ^ 2)
  ]
  set separation-urge scale seperation-urge-weight separation-urge

  ;flat urge
  let flat-urge [orientation] of mid-agent
  let flat-urge-weight ((scalar-prod (sub (agent-to-vector self) mid) flat-urge) / (magnitude flat-urge)) * (-1)
  set flat-urge scale (flat-urge-weight) flat-urge

  ;move urge
  let direction [orientation] of mid-agent
  let agent agent-to-vector self
  let projection line-projection agent mid direction
  let line-urge sub projection agent
  let move-urge cross-prod orientation line-urge
  set move-urge scale mw move-urge


  ;add urges
  let vector [0 0 0]
  set vector add vector center-urge
  set vector add vector move-urge
  set vector add vector separation-urge
  set vector add vector flat-urge

  report vector

end


to-report calc-ball-of-fliers [mid-agent closest r]
  let mid agent-to-vector mid-agent
  ;center urge
  let center-urge sub mid (agent-to-vector self)
  set center-urge scale (((magnitude center-urge) - ( r / (layer + 1) )) / (magnitude center-urge))  center-urge

  ;seperation urge
  let separation-urge [0 0 0]
  let seperation-urge-weight 0
  if (closest != nobody) [
    set separation-urge sub (agent-to-vector self) (agent-to-vector closest)
    set seperation-urge-weight ((1 / magnitude separation-urge) ^ 2)
  ]
  set separation-urge scale seperation-urge-weight separation-urge

  ;add urges
  let vector [0 0 0]
  set vector add vector center-urge
  set vector add vector separation-urge

  report vector

end

to-report calc-line-of-fliers [mid-agent closest r]
  ;Projection onto line
  let mid agent-to-vector mid-agent
  let direction [orientation] of mid-agent
  let agent agent-to-vector self
  let projection line-projection agent mid direction
  let line-urge sub projection agent
  set line-urge scale 27 line-urge


  ;center urge
  let center-urge sub mid agent
  let weight magnitude sub agent mid - r
  let center-urge-weight ifelse-value (weight > 0) [weight][0]
  set center-urge scale center-urge-weight center-urge


  ;seperation urge
  let separation-urge [0 0 0]
  let seperation-urge-weight 0
  if (closest != nobody) [
    set separation-urge sub (agent-to-vector self) (agent-to-vector closest)
    set seperation-urge-weight ((1 / magnitude separation-urge) ^ 2)
  ]
  set separation-urge scale seperation-urge-weight separation-urge

  ;add urges
  let vector [0 0 0]
  set vector add vector line-urge
  set vector add vector separation-urge
  set vector add vector center-urge

  report vector
end

to-report line-projection [point origin direction]
  let a scalar-prod sub point origin direction
  let b scalar-prod direction direction
  report add scale (a / b) direction origin
end





to adapt-flight-vector [vector]
  if (magnitude vector > max-velocity) [
    set vector (scale max-velocity normalize vector)
  ]
  let nxcor xcor + (item 0 vector)
  let nycor ycor + (item 1 vector)
  let nzcor zcor + (item 2 vector)
  facexyz nxcor nycor nzcor
  fd magnitude vector
end


to remove-agent
  ask one-of swarm-agents [
    die
  ]
  ask swarm-agents with [get-mid-agent = nobody] [
    set swarm [swarm] of min-one-of other swarm-agents with [swarm != [swarm] of myself] [distance myself]
    set color ((swarm * 10) + 5)
  ]
end


to add-agent
  create-swarm-agents 1 [
    initialize-agent

    if-else (set-mode = "multiple-set") [
      let ref-agent min-one-of other swarm-agents [distance myself]
      set swarm [swarm] of ref-agent
      set layer [layer] of ref-agent
      ask swarm-agents [
        set color ((swarm * 10) + 5)
      ]
    ] [
      set layer [layer] of min-one-of other swarm-agents [distance myself]
    ]

  ]

end






;;--------------------------------------- gui functions --------------------------------------------


to select-midpoint
  ask one-of midpoints [
     set controller-x xcor
     set controller-y ycor
     set controller-z zcor
     set controller-heading heading
     set controller-pitch pitch
     set shape "arrow"
  ]

  ask midpoints [
    set shape "x"
  ]
end


to select-layer
  if layer-midpoints-count = 0 [
    set layer-midpoints-count [0 0 0 0 0]
  ]
  if layers-neighbourhood = 0 [
    set layers-neighbourhood [0 0 0 0 0]
  ]
  if layers-radius = 0 [
    set layers-radius [0 0 0 0 0]
  ]

  if layers-swarm-algortihm = 0 [
    set layers-swarm-algortihm ["Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  ]

  if layers-move-weight = 0 [
    set layers-move-weight [0 0 0 0 0]
  ]

  set agents-per-midpoint (item selected-layer layer-midpoints-count)

  set radius (item selected-layer layers-radius)

  set move-weight (item selected-layer layers-move-weight)

  set neighbourhood-radius (item selected-layer layers-neighbourhood)

  show item selected-layer layers-swarm-algortihm

  set swarm-algorithm (item selected-layer layers-swarm-algortihm)

end

to confirm-layer
 set layer-midpoints-count replace-item selected-layer layer-midpoints-count agents-per-midpoint
 set layers-radius replace-item selected-layer layers-radius radius
 set layers-neighbourhood replace-item selected-layer layers-neighbourhood neighbourhood-radius
 set layers-swarm-algortihm replace-item selected-layer layers-swarm-algortihm swarm-algorithm
 set layers-move-weight replace-item selected-layer layers-move-weight move-weight

end



to scenario-1
  ;Ring-of-Rings
  set layer-midpoints-count [8 8 0 0 0]
  set layers-radius [20 10 0 0 0]
  set layers-neighbourhood [20 5 0 0 0]
  set layers-swarm-algortihm ["Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0 0.020 0 0 0]
  set layer-count 2
  setup
end

to scenario-2
  ;Ring-of-Lines
  set layer-midpoints-count [8 8 0 0 0]
  set layers-radius [20 10 0 0 0]
  set layers-neighbourhood [20 5 0 0 0]
  set layers-swarm-algortihm ["Ring-of-Fliers" "Line-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0.004 0 0 0 0]
  set layer-count 2
  setup
end

to scenario-3
  ;Ring-of-Line-of-Rings
  set layer-midpoints-count [8 8 6 0 0]
  set layers-radius [20 10 7 0 0]
  set layers-neighbourhood [20 5 5 0 0]
  set layers-swarm-algortihm ["Ring-of-Fliers" "Line-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0.004 0 0 0 0]
  set layer-count 3
  setup
end

to scenario-4
  ;Ring-of-Balls
  set layer-midpoints-count [8 20 0 0 0]
  set layers-radius [20 6 0 0 0]
  set layers-neighbourhood [20 5 0 0 0]
  set layers-swarm-algortihm ["Ring-of-Fliers" "Ball-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0 0 0 0 0]
  set layer-count 2
  setup
end

to scenario-5
  ;Line-of-Balls
  set layer-midpoints-count [8 20 0 0 0]
  set layers-radius [30 8 0 0 0]
  set layers-neighbourhood [20 5 0 0 0]
  set layers-swarm-algortihm ["Line-of-Fliers" "Ball-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0 0 0 0 0]
  set layer-count 2
  setup
end

to scenario-6
  ;Line-of-Rings-of-Rings
  set layer-midpoints-count [8 10 10 0 0]
  set layers-radius [20 10 5 0 0]
  set layers-neighbourhood [20 5 5 0 0]
  set layers-swarm-algortihm ["Line-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0 0 0 0 0]
  set layer-count 3
  setup
end





to hide-midpoints
  ask midpoints [
    if-else (hidden?) [
      st
    ] [
      ht
    ]
  ]
end

;; --------------------------------------- vector functions ----------------------------------------


to-report agent-to-vector [agent]
  report (list [xcor] of agent [ycor] of agent [zcor] of agent)
end



to-report add [v1 v2]
  report (map + v1 v2)
end

to-report sub [v1 v2]
  report (map - v1 v2)
end

to-report scale [scalar vector]
  report map [n -> scalar * n] vector
end

to-report magnitude [vector]
  report sqrt sum map [n -> n * n] vector
end

to-report normalize [vector]
  let m magnitude vector
  if m = 0 [
    report vector
  ]
  report map [n -> n / m] vector
end

to-report scalar-prod [v1 v2]
  report sum (map * v1 v2)
end

to-report cross-prod [v1 v2]
  let r1 (item 1 v1)*(item 2 v2) - (item 2 v1) * (item 1 v2)
  let r2 (item 2 v1)*(item 0 v2) - (item 0 v1) * (item 2 v2)
  let r3 (item 0 v1)*(item 1 v2) - (item 1 v1) * (item 0 v2)

  report (list (r1) (r2) (r3))
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
1321
1322
-1
-1
13.0
1
10
1
1
1
0
1
1
1
-50
50
-50
50
-30
30
1
0
1
ticks
30.0

BUTTON
106
240
169
273
NIL
setup\n
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
114
4
294
37
agent-max-count
agent-max-count
0
400
150.0
1
1
NIL
HORIZONTAL

SLIDER
389
417
561
450
controller-x
controller-x
min-pxcor
max-pxcor
0.0
1
1
NIL
HORIZONTAL

SLIDER
392
460
564
493
controller-y
controller-y
min-pycor
max-pycor
0.0
1
1
NIL
HORIZONTAL

SLIDER
393
502
565
535
controller-z
controller-z
min-pzcor
max-pzcor
0.0
1
1
NIL
HORIZONTAL

BUTTON
83
775
146
808
NIL
go
T
1
T
OBSERVER
NIL
G
NIL
NIL
1

SLIDER
80
879
253
912
max-velocity
max-velocity
0
1
0.3
0.1
1
NIL
HORIZONTAL

SLIDER
1038
269
1247
302
neighbourhood-radius
neighbourhood-radius
0
50
5.0
1
1
NIL
HORIZONTAL

SLIDER
848
268
1021
301
radius
radius
0
100
6.0
1
1
NIL
HORIZONTAL

BUTTON
104
416
230
450
NIL
go-midpoints
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
394
548
584
581
controller-heading
controller-heading
0
360
315.0
1
1
NIL
HORIZONTAL

SLIDER
394
590
567
623
controller-pitch
controller-pitch
0
360
90.0
1
1
NIL
HORIZONTAL

TEXTBOX
115
41
775
88
----------------------------------------------------------------------------------------------------\n1. SETUP\n----------------------------------------------------------------------------------------------------\n
12
0.0
1

TEXTBOX
104
366
644
407
---------------------------------------------------------------------------------------------------\n2. Place Midpoint\n----------------------------------------------------------------------------------------------------\n
12
0.0
1

TEXTBOX
81
713
689
760
----------------------------------------------------------------------------------------------------\n3. GO\n----------------------------------------------------------------------------------------------------\n
12
0.0
1

TEXTBOX
83
828
728
876
----------------------------------------------------------------------------------------------------\n4. Parameters\n----------------------------------------------------------------------------------------------------\n
12
0.0
1

BUTTON
99
474
238
508
Hide Midpoints
hide-midpoints\n
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
108
137
280
170
layer-count
layer-count
1
5
3.0
1
1
NIL
HORIZONTAL

SLIDER
622
267
826
300
agents-per-midpoint
agents-per-midpoint
0
10
20.0
1
1
NIL
HORIZONTAL

MONITOR
291
98
440
143
NIL
count swarm-agents
17
1
11

SWITCH
614
780
807
813
sync-orientation
sync-orientation
0
1
-1000

CHOOSER
442
774
591
819
separation-mode
separation-mode
"local" "global"
0

CHOOSER
107
179
255
224
set-mode
set-mode
"multiple-set" "single-set"
1

CHOOSER
640
123
778
168
selected-layer
selected-layer
0 1 2 3 4
1

BUTTON
790
129
855
162
Select
select-layer
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

CHOOSER
1271
272
1409
317
swarm-algorithm
swarm-algorithm
"Ring-of-Fliers" "Ball-of-Fliers" "Line-of-Fliers"
1

BUTTON
863
129
937
162
Confirm
confirm-layer
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

MONITOR
950
129
1083
174
NIL
layer-midpoints-count
17
1
11

BUTTON
105
282
168
315
clear
clear-all
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

MONITOR
1093
129
1218
174
NIL
layers-radius
17
1
11

MONITOR
1226
129
1602
174
NIL
layers-swarm-algortihm
17
1
11

MONITOR
950
179
1084
224
NIL
layers-neighbourhood
17
1
11

TEXTBOX
839
94
1283
113
-----------------------------------------Layer-setup-----------------------------------------
12
0.0
1

TEXTBOX
841
234
1588
253
-----------------------------------------Layer-parameter-----------------------------------------
12
0.0
1

BUTTON
161
775
294
809
remove-agent
remove-agent
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
310
776
417
810
NIL
add-agent\n
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
1424
271
1597
304
move-weight
move-weight
0
0.05
0.0
0.001
1
NIL
HORIZONTAL

MONITOR
1096
180
1238
225
NIL
layers-move-weight
17
1
11

BUTTON
664
358
855
392
Ring-of-Rings
scenario-1
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

TEXTBOX
861
329
1447
348
-----------------------------------------Scenarios-----------------------------------------
12
0.0
1

BUTTON
874
358
998
392
Ring-of-Lines
scenario-2\n
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
1010
358
1196
392
Ring-of-Lines-of-Rings
scenario-3
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
1205
359
1306
392
Ring-of-Balls
scenario-4
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
1319
359
1417
392
Line-of-Balls
scenario-5
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
1433
359
1541
392
NIL
scenario-6
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.4.0
@#$#@#$#@
need-to-manually-make-preview-for-this-model
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
